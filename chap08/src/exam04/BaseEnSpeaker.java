package exam04;

//고급스러운 스피커 정의 (저음을 웅장하게 들려주는 기능_중저음 튜닝 기능이 탑제됨)
class BaseEnSpeaker extends Speaker { //Speaker부모클래스에 있는 기능들이 BaseEnSpeaker자식클래스에 그대로 구현된 것과 동일한 효과로 동작이 됨
	private int baseRate; // 중저음 튜닝 기능의 데이터를 관리할 필드
	
	BaseEnSpeaker() { //디폴트 생성함 => 부모클래스에 전달 값이 없어서 에러가 안남.
		super();
	}

	public int getBaseRate() { //읽어오고자 할 때
		return baseRate;
	}

	public void setBaseRate(int baseRate) { //셋팅하고자 할 때
		this.baseRate = baseRate;
	}
	
	//상속의 관계로 정의했을 때 부모에 정의된 메서드를 이름과 반환형, 입력받는 것까지 동일하게 재정의를 한다고 할 때,
	//이 메서드를 "메서드 오버라이딩"이라고 불러주고 있다.
	//메서드 오버라이딩은 상속에 관계에서만 특수하게 적용할 수 있는 기능이다. 
	public void showCurrentState() { 
		//정의하는 의도: 볼륨값뿐만아니라 base를 컨트롤하는 base셋팅값이 같이 정의됨
		//따로 메서드를 정의하는 것이 아니라 기능이 업그레이드가 되어졌을 때 메서드 오버라이딩으로 정의하는 것이다.
		//자식의 showCurrentState()가 호출이 되어지면 부모의 메서드도 같이 실행이 되어져서 
		//하나의 메서드에서 부모와 자식의 유사 기능이 하나로 동작을 통합시켜서 구현하고자 한다.
		//즉, 부모와 자식의 메서드를 동시 장착해서 기능을 업그레이드하여 출력하도록 한다.
		//    (*** 상속에 관계에서만 의미를 가지는 개념이다.) 
		
		//메인에서 자식의 인스턴스로 이 메서드를 부르면 자식의 메서드가 호출된다.
		//사용자의 의도는 부모에 정의되어진 오버라이딩 된 메서드를 호출하고자 하는 것이였지만
		//부모와 자식의 메서드 이름은 메서드 오버라이딩으로 일부러 만들어놨기 때문에
		//자바는 가까이에 있는 놈만을 먼저 쳐다보게 된다. 그렇기 때문에 무한 반복으로 자기 자신을 호출하게된다.
		//                                                              -> 강제로 자바에 의해서 프로그램을 종료
		//showCurrentState(); //StackOverflowError - 메모리가 모자란다는 에러가 남.
		super.showCurrentState();
		//부모에 정의된 메서드를 호출하려면 "super."을 통해 상속에 관계하에서 부모에 정의된 메서드를 호출할 수 있도록 한다.
		//super: 부모의 영역을 바라보게끔 키워드를 제공해주면서 처리를 해주고 있다.
			
		System.out.println("베이스 크기: " + getBaseRate());
	} 	

}
