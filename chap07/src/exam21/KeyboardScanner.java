package exam21;

import java.util.Scanner; //ctrl + shift + o키를 이용해서 자동으로 기능을 가져옴.
//String name = "홍길동";에서는 따로 패키지를 import를 안하고, Scanner는 왜 import를 해오는 건지 의문이 들어야 함.
//-> java.lang만 별도로 import를 하지 않아도 번거로움을 줄여주고자 소스코드를 컴파일하는 과정에서 자바는 자동으로 
//   import를 추가 해주게끔 동작이 되어지고 있다고 생각.

public class KeyboardScanner {
	public static void main(String[] args) {
		Scanner keyboard = new Scanner(System.in); //프로그램의 실체화, 구체화함(메모리가 할당이 되어있을 때를 말함)
		//키보드로부터 입력한 값을 프로그램안으로 가져오고 싶은 것이라면
		//키보드의 값이 눌렸을 때 눌린 값을 프로그램 안으로 가져오려면 연결 통로가 먼저 만들어져야 한다. 
		//=> 연결 통로를 만들어주는(연결시켜주는) 필드가 있음(System.in)
		//out => 출력이라는 의미, in => 키보드로부터 데이터를 입력받겠다는 의미
		//자바개발자들이 System에서 in이라는 데이터를 전달받을 수 있는 통로를 미리 만들어놨다.
		
		System.out.println("덧셈 연산 수행 프로그램.");
		
		//이전에는 고정된 값으로 연산하고 결과를 출력하도록 하는 단순 프로그램이였다면
		//Scanner를 이용하면 실행할 때마다 사용자로 부터 다양한 입력값을 받아서 
		//결과를 출력하도록 하는 기능의 프로그램으로 확대가 가능하게 된 것이다.
		System.out.print("첫번째 정수값 입력: "); 
		int num1 = keyboard.nextInt(); 
		//Scanner 참조 자료형안에 nextInt메서드가 있음. 이를 호출하게 되면 => 자바는 메서드를 호출을 하러 가고 
		//사용자가 정수를 입력하기 전까지 메서드 안에서 자바는 대기를 하고 있다. 
		//(대기하면서도 사용자가 데이터를 입력하면 보여주게끔 동작함)
		//-> 사용자가 정수를 입력하고 엔터를 쳤을 때의 시점에서 
		//   자바는 사용자가 입력한 값을 가지고 복귀를 하는 구조로 메서드 정의가 되어있다.
		//-> 그 값을 잘 보관(변수 선언)하고 있다가 사용을 하면 된다. 
		
		System.out.print("두번째 정수값 입력: "); 
		int num2 = keyboard.nextInt(); 
		//두번째 데이터가 입력될때까지 대기함. -> 입력되는 순간 그 값을 가지고 복귀 -> num2에 담아둠
		
		int sum = num1 + num2; 
		
		System.out.printf("%d + %d = %d\n", num1, num2, sum);
		System.out.println("======================================");
		
		
		System.out.println("곱셈 연산 수행 프로그램.");
		
		System.out.print("첫번째 정수값 입력: "); 
		num1 = keyboard.nextInt(); //변수의 메모리 공간을 재사용_변수특징
		
		System.out.print("두번째 정수값 입력: "); 
		num2 = keyboard.nextInt(); 
		
		sum = num1 * num2; 
		
		System.out.printf("%d * %d = %d\n", num1, num2, sum);
		//정수값일 때는 nextInt()메서드를 가지고 대기하고 있으면 된다.
		//Scanner제공 다양한 메서드 -> pdf파일 확인 (메서드 이름들이 다 직관적임)
		//문자열과 문자를 입력받고 싶을 때는 nextLine이라는 점을 유념해두기.
		
		
		keyboard.nextLine(); // dummy code - 이전에 무시된 Enter 키값을 버리고 수행하게끔 추가로 넣어준 코드
		System.out.print("당신의 이름은? ");
		String name = keyboard.nextLine(); //문자열은 nextLine()메서드를 사용.
		
		System.out.printf("당신의 이름은 %s이군요.\n", name);
		
		
		
	} //반복문에 감싸면 원하는 횟수만큼 반복할 수 있음. 그렇게 활용
}

//Scanner 메서드 사용할 때 유의 사항) 영문에 있어서는 오류없이 동작되게끔 처리가 되지만 
//문자열을 처리할 때 한글(영문외에 다른 언어들)의 호환성 부분에 있어서 염두할 상황들이 발생


//영문은 한가지만 고려하면 되고, 한글은 두가지를 고려해야 한다.
//영문과 한글에서 공통적으로 고려해야 할 사항은 ↓
//nextLine() 메서드를 호출할 때 다른 메서드들을 호출하고 난 다음에 nextLine을 호출하게 되면 문제점이 발생한다.
//-> nextLine()메서드만 호출이 되어졌다면 문제가 안됨

//***Scanner 메서드에서는 복귀할 때 데이터만 가지고 오는 것이 아니라 Enter를 쳤던 키값까지 같이 리턴이 되어진다.

//boolean, int, double등의 자료형들은 그 데이터만이 변수에 담아주고 다음을 수행하러 간다.
//그렇게 되면 enter라는 키값은 존재하고 있는 것이다.	
//=> 보충설명: nextInt()를 호출하여 들어가는 시점에 enter라는 키값자체는 정수값을 기다리고 있는 것이기 때문에 무시하고 버려버린다.
//             boolean, int, double등은 명료하기 때문에 키값과 구별이 돼서 무시하고 버리는 것이다.
//그 다음에 nextLine()을 호출하여 들어갈 때 이전에 무시되었던 enter의 키값들을 문자열로 인식하게 된다.
//따라서 바로 그 엔터값을 가지고 복귀하여 수행되어 버리는 것이다.
		
//따라서, 다른 메서드라도 호출을 하고 난 다음에 nextLine()를 호출하게 되면 이러한 문제점들이 있기 때문에
//        enter는 무시를 해야 한다. 그렇게 때문에 nextLine() 호출 전에 더미로 keyboard.nextLine();의 명령을 선언해준다. 
//                                                                            - enter라는 키값을 버릴 용도
//***내부의 동작상의 문제점들을 위해(필요에 의해 문제점이 발생되지 않기 위해서) 추가하는 명령어들을 dummy code라고 불려진다.
		
//유의 사항2)
//그렇게 nextInt()수행된 코드에서 영문을 넣으면 잘 입력이 되고, 결과도 잘 출력이 된다.
//한글을 입력하면 엉뚱한 위치에서 한글이 입력된다. 
//-> 영문이 아닌 타국의 언어들을 입력할 때 커서의 위치에서 바로 출력되지 않는 이클립스의 문제점이 발생한다.
//   이러한 버그를 이클립스는 큰 문제점으로 생각하지 않음 -> 그래서 아직 해결 안됨
//그래서 한글(영문이 아닌 타국언어)과 같은 경우 커서의 위치를 직접 클릭을 하여 입력을 하도록 하여 동작을 확인해야 한다.


