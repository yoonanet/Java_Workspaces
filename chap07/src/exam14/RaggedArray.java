package exam14;

public class RaggedArray {
	public static void main(String[] args) { 
		/* int[][] arr = new int[][] { 
			{1, 2},
			{5, 6, 7},
			{9, 10, 11, 12} //9개의 공간이 필요함
		}; */
		
		//RaggedArray을 추후에 값을 초기화하고자 한다면? 어떻게 선언을 해줘야 할까?
		//int[][] arr = new int[3][4]; //12개의 공간이 만들어지기 때문에 잘못된 선언이다.
		
		//RaggedArray 공간 할당의 방법 ↓
		int[][] arr = new int[3][]; //행의 값을 고정시키고, 열의 값을 빈칸으로 선언한다. (앞에 이차원 배열이라는 자료형이 적혀있기 때문에 괜찮음)
		//위 선언에 의해 메모리 공간만 할당을 한 것이기 때문에
		arr[0] = new int[2]; // 행으로 열에 접근을 해서 공간을 할당해주는 형식으로 열의 메모리 할당 정보를 추가한다.
		arr[1] = new int[3];
		arr[2] = new int[4];
		//RaggedArray배열은 선언과 동시에 초기화를 해주는 코드의 작성이 훨씬 효율적이다. (반복문을 사용하기에 복잡해짐.)
		
		// 초기화
		arr[0][0] = 1;
		arr[0][1] = 2;
		
		arr[1][0] = 5;
		arr[1][1] = 6;
		arr[1][2] = 7;
		
		arr[2][0] = 9;
		arr[2][1] = 10;
		arr[2][2] = 11;
		arr[2][3] = 12;
		
		
		for(int i = 0; i < arr.length; i++) {
			for(int j = 0; j < arr[i].length; j++) { 
				System.out.println(arr[i][j]); 
				//데이터값을 읽어와달라고 할 때, for문에 반복횟수를 숫자로 넣어준다고 한다면
				//최대갯수로 지정을 해준다면 1행에 두개의 데이터 값이 있지만 4번을 반복하게 될 것이다.
				//따라서 인덱스 영역을 벗어나서 실행이 되고 있다는 오류 메시지가 출력되면서 프로그램이 강제 종료된다.
				
				//그렇기 때문에 이러한 상황을 대비하여 .length를 통해 오류를 예방한다.
				//열이 일치되지 않는 배열을 RaggedArray이라고 불려지고 있다. 또한, RaggedArray은 언제든지 선언이 가능하다.
			}
		}
		
		
	}
}
