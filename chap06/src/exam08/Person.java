package exam08;

class Person {
	//두 데이터를 관리하라는 제시가 되어있다고 가정
	private String name; // 이름
	private int milID;   // 군번
	
	Person(String name, int milID){ // 생성자
		//매개변수에 담긴값을 필드값에 넣음(초기화)
		//자바는 가까이에 있는 놈만 바라본다 => 자바는 매개변수 값을 먼저 바라보고 그 다음에는 필드를 바라보게 되는 것이다.
		//따라서 매개변수의 이름과 필드의 이름이 같으면 
		//값이 매개변수를 통해 들어와서 매개변수에게 업데이트를 하게 된다.
		//***매개변수의 이름과 필드의 이름은 다르게 지정해줘야 한다. 
		// => 생성자의 매개변수에 값을 잠깐 넣었다가 필드에 값을 넣어주는 경우기 때문에 다른 이름으로 지정해서 넣기 번거로움 
		// 따라서 this라는 메모리 할당의 처음 주솟값을 가지고 있는 키워드를 가지고 메모리 필드에 접근한다.
		this.name = name;
		this.milID = milID; 
		//매개변수와 필드의 이름에서↓
		//이름이 다르던 같던 this.을 붙이는 것은 동일 동작이고, 이름이 달라서 구별이 된다고 하더라고
		//this.이 붙어있는 것은 확실하게 내 필드를 명시하는 코드가 되는 것이다.
		//따라서 생성자에서 필드에 접근할 때는 this.를 습관화하여 붙여주는게 좋다.
		
		//이때 this는 진행 중일때의 나의 주솟값 보는 것임. (현재 진행중인 나를 보기 때문에 어떤 값을 볼지 헷갈리지 않는 것이다.)
		//따라서 this는 내 참조자료형 영역에서만 사용할 수 있고, 외부에서는 사용할 수 없는 것이다.
	}
	
	
	Person(String name){ // 생성자 오버로딩
		//매개변수의 갯수가 다르기 때문에 생성자 오버로딩이 가능하다.
		//따라서 생성자도 오버로딩의 기능을 제공해준다.
		this.name = name;
		milID = -1; //임의로 값을 넣어서 초기화를 해준다.
		//이때의 장점은 군번이 있는 대상도 있지만 군번이 없는 대상도 있기 때문에 메서드를 통해 따로 작성을 해줄 수 있다.
	}
	
	public void showInfo() {
		System.out.println("이름: " + name);
		
		if(milID == -1) {
			System.out.println("군번이 없어요.");
		} else {
			System.out.println("군번: " + milID);
		}
		
	}
}
